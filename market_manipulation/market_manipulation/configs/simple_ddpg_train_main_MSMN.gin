import tensorflow

import market_manipulation.agents
import market_manipulation.train_main
import market_manipulation.utils.schedules
import market_manipulation.utils.external_configurables

import gin.tf.external_configurables


__main__.train_policy.agent = @DDPGAgent()
__main__.train_policy.market_sim = @MarketSimulator()
__main__.train_policy.experience_parser = @DDPGExperienceParser()
__main__.train_policy.zi_payoff_parser = @ParseAveragePayoff()

training_protocol.agent_name = "rl_agent"
training_protocol.agent_max_vector_depth = 20
training_protocol.agent_additional_actions = "policyAct"

training_protocal.num_updates = 1
training_protocol.num_episodes = 10
training_protocol.hooks = []
training_protocol.result_dir = "results/"

DummyMarketSimulator.dummy_result_path = "../testdata/market_sim_output.json"

MarketSimulator.market_sim_dir = "/Users/shearerj/market-sim/market-sim/market-sim.sh"
MarketSimulator.agent_strategy_name = "tfrl"
MarketSimulator.agent_omega_depth = 5
MarketSimulator.background_name = "background"
MarketSimulator.background_strategy_name = ["markov:Rmin_0_Rmax_1000_Thresh_0.8", "markov:Rmin_0_Rmax_1000_Thresh_0.5", "markov:Rmin_0_Rmax_1000_Thresh_1"]
MarketSimulator.background_probability = [0.11178098116717383, 0.3530863734318544, 0.5351326454009718]
MarketSimulator.background_number = 10
MarketSimulator.market_config = {
    "simLength": 5000,
    "fundamentalMean": 1000000.0,
    "maxPosition": 10,
    "privateValueVar": 50000000.0,
    "fundamentalShockVar": 5000000.0,
    "PriceVarEst": "Infinity",
    "arrivalRate": 0.005,
    "fundamentalMeanReversion": 0.01,
    "markets": "cda",
    "fundamentalObservationVariance": 10000000.0,
    "communicationLatency":0,
    "benchmarkType": "VWAP"
}

DDPGExperienceParser.bid_len = 5
DDPGExperienceParser.ask_len = 5
DDPGExperienceParser.trade_len = 5
DDPGExperienceParser.min_reward = -2000
DDPGExperienceParser.max_reward = 2000
DDPGExperienceParser.reward_clipping = True

DDPGAgent.critic_network = @Critic()
DDPGAgent.actor_network = @Actor()
DDPGAgent.critic_optimizer = @snt.optimizers.SGD()
DDPGAgent.actor_optimizer = @snt.optimizers.SGD()
DDPGAgent.batch_size = 32
DDPGAgent.replay_capacity = 10000
DDPGAgent.min_replay_size = 128
DDPGAgent.target_update_period = 1
DDPGAgent.gamma = 0.99
DDPGAgent.tau = 0.005
DDPGAgent.action_coefficient = 2000
DDPGAgent.exploration_schedule = @ConstantSchedule()

ConstantSchedule.x = 0.05

snt.optimizers.SGD.learning_rate = 0.0003